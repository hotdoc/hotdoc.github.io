fragment_downloaded_cb({"url": "config.html#core.config.Config", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"core.config.Config\">\n\t\t\t\n\t\t\n\n\n<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"core.config.Config.__init__\">\n\t\t<h3 id=\"coreconfigconfig1\">\n\t<span><code>core.config.Config</code></span>\n</h3>\n\n\t\t<pre class=\"programlisting\">\ncore.config.Config (command_line_args, conf_file, defaults)</pre>\n\n<p>Constructor for <em>ConfigParser</em>.</p>\n\n\t<div class=\"parameter_container\">\n\t\t<h4 id=\"parameters\">Parameters</h4>\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>command_line_args:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>a list of command line arguments\nthat will override the keys defined in <em>conf_file</em>,\nor <em>None</em></p>\n</td>\n<td>\nlist\n</td>\n</tr>\n\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>conf_file:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>the path to the configuration file. If\n<em>None</em>, <em>ConfigParser</em> will look for a file named\n<em>hotdoc.json</em> in the current directory.</p>\n</td>\n<td>\n<a title=\"str\" href=\"https://docs.python.org/2.7/library/functions.html#str\">str</a>\n</td>\n</tr>\n\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>defaults:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\n\n\n\n</div>\n\n\n<div class=\"class_details\">\n\t<p>Helper class to help deal with common extension dependencies.</p>\n<p>This class has two goals:</p>\n<ul class=\"simple\">\n<li>Help extensions retrieve sources and indexes, with\nsupport for filters and wildcards.</li>\n<li>Provide a generic way to list all the dependencies\nfor a given hotdoc project, without needing to\nimport extensions and query them individually, as it\nis costly and we want to make this operation as\ntransparent as possible for the build system.</li>\n</ul>\n<p>This implies that extensions with external dependencies\nneed to follow several semantic conventions for the arguments\nthey expose:</p>\n<ul class=\"simple\">\n<li>When an extension exposes an index, it needs to expose\nan argument named <em>&lt;prefix&gt;index</em> to retrieve it.</li>\n<li>When an extension accepts a list of sources, it needs\nto expose two arguments, one named <em>&lt;prefix&gt;sources</em>,\nand the other named <em>&lt;prefix&gt;source_filters</em>. With this\ndone, <em>ConfigParser</em> will automatically provide wildcard\nexpansion and filtering.</li>\n</ul>\n<p>Note that <a class=\"reference external\" href=\"extension.html#core.extension.Extension\">core.extension.Extension</a> provides helper methods\nto register index and sources options, this documentation should\nonly be interesting for 'advanced' use cases.</p>\n\n</div>\n\n</div>\n\n\n"});