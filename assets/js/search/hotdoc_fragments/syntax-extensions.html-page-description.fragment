fragment_downloaded_cb({"url": "syntax-extensions.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"syntax-extensions.markdown\">\n<h1 id=\"extensions-to-the-commonmark-syntax\">Extensions to the CommonMark syntax</h1>\n<h2 id=\"link-syntax\">Link syntax</h2>\n<p>The syntax for a \"classic link\" in markdown is:</p>\n<pre><code class=\"language-markdown\">[link label goes here](link-destination-there)\n</code></pre>\n<p>Hotdoc will make some additional checks on the link destination, and handle the\nfollowing cases:</p>\n<h3 id=\"referencing-a-symbol\">Referencing a symbol</h3>\n<pre><code class=\"language-markdown\">[any label](my_symbol_name)\n</code></pre>\n<p>If <code>my_symbol_name</code> is recognized as a valid symbol, then at format time the\ndestination will be modified to point to the url of this symbol's\ndocumentation.</p>\n<blockquote>\n<p>The label can be empty, in which case it will be set to the name of the\nsymbol at format time</p>\n</blockquote>\n<h3 id=\"referencing-another-page\">Referencing another page</h3>\n<pre><code class=\"language-markdown\">[any label](my_other_page.markdown)\n</code></pre>\n<p>If <code>my_other_page.markdown</code> is a known subpage, then the destination will be\nupdated to point to its url at format time.</p>\n<p>Hotdoc also adds an <code>id</code> attribute to all header links that don't have one,\nwith its value set as the value of the title, lowercased, with whitespaces\nreplaced by hyphens (<code>-</code>), and all non-ASCII characters stripped away, as well\nas characters forbidden in ids such as <code>/</code>.</p>\n<p>This means that given this page named <code>referenced.markdown</code>:</p>\n<pre><code class=\"language-markdown\"># My title\n\n## My subsection\n</code></pre>\n<p>One can link to <code>My subsection</code> in a different page like this:</p>\n<pre><code class=\"language-markdown\">See [this subsection](referenced.markdown#my-subsection) for more details.\n</code></pre>\n<p>If the link is made in the same page, one can also use an empty link label,\nwhich will get replaced by the contents of the title at format-time.</p>\n<h2 id=\"smart-file-inclusion-syntax\">Smart file inclusion syntax</h2>\n<p>Hotdoc extends the CommonMark syntax with the concept of transclusion, lifted\nfrom MultiMarkdown. See\n<a href=\"http://talk.commonmark.org/t/transclusion-or-including-sub-documents-for-reuse/270%3E\">this page</a>\nfor the beginning of a discussion about having this feature in CommonMark\nitself.</p>\n<p>The syntax is:</p>\n<pre><code class=\"language-markdown\">Please include {{ my_file.markdown }}\n</code></pre>\n<p>includes the file and parses it as markdown, if the extension is either\n<code>.markdown</code> or <code>.md</code>. Any other extension (or lack of), will be included\nin a code block.</p>\n<pre><code class=\"language-markdown\">Please include this subsection of my file {{ my_file.markdown[start:end] }}\n</code></pre>\n<p>includes the lines comprised between start and end and parses them as markdown.</p>\n<pre><code class=\"language-markdown\">Please include this symbol from my source code file {{ my_file.recognized_language_extension#symbol_name }}\n</code></pre>\n<p>for example with <code>{{ my_file.c#foo_bar }}</code>, retrieves the symbol named\n<code>foo_bar</code> in <code>my_file.c</code>, and includes its content as a markdown code block.\nThe range syntax can also be used in combination with this, for example\n<code>{{ my_file.c#foo_bar[2:4] }}</code> will only include the lines 2 to 4 in the\nlocal scope of <code>foo_bar</code>.</p>\n<blockquote>\n<p>The file extension needs to be recognized and handled by a source code\nparsing hotdoc extension for this feature to work as described.</p>\n</blockquote>\n<h2 id=\"piped-tables-syntax\">Piped tables syntax</h2>\n<p>Tables are one of the <a href=\"https://talk.commonmark.org/t/tables-in-pure-markdown/81/92\">most demanded</a> feature that is still\ncurrently lacking in the CommonMark specification.</p>\n<p>I have <a href=\"https://github.com/jgm/cmark/pull/123\">proposed</a> a pretty intrusive patch (but obviously\nperfectly correct ^^) to add extension support in libcmark, however getting\nit upstream is pretty involved, and having the new version of cmark packaged\nin major linux distributions will also take time.</p>\n<p>In the meantime, my modified version of cmark is <a href=\"https://github.com/MathieuDuponchelle/cmark/tree/d71d4a395e73762ee1c2b8cf147fd30fb3a78cb0\">bundled</a> in hotdoc\n(I know D: ), and supports a simple version of piped tables:</p>\n<pre><code class=\"language-markdown\">| Header 1 | Header 2 |\n| -------- | -------- |\n| Content  | Content  |\n</code></pre>\n<p>This is recognized as a table with two header cells, and a row containing\ntwo cells.</p>\n<p>The include extension is also implemented this way.</p>\n\n</div>\n\n\n        "});