fragment_downloaded_cb({"url":"the-markdown-pages.html#assigning-subtrees-to-language-extensions","fragment":"Assigning sub-trees to language extensions\nWhen hotdoc parses markdown sources, it attributes them an \"extension-name\". This name allows using language-specific formatters at format-time, amongst other things that extensions can customize. Of course an extension can choose to not provide a specific formatter, in which case the default formatter will be used.\nNote: this is (currently) the case for the C extension, which means\nthat you can technically skip the rest of this section if C is your use\ncase, as the default formatter will format symbols as C symbols.\nThe current approach for letting hotdoc know that a page and its subpages\nshould be handled by a given extension is to create a separate \"sub-index\"\nfile, use a \"well-known-name\" placeholder in the sitemap instead of the raw\nfilename, and finally pass the raw filename to the chosen extension\nthrough the *extension-prefix*-index configuration option.\nFor example we could rework our previous example as such:\nOpen markdown_files/python_index.markdown with the editor of your choice, put the following contents inside it and save it:\nUpdate sitemap.txt to:\nFinally run hotdoc this way:\nNote that the two pages you created earlier are not reparsed, nor\nreformatted. This only presents a very theoretical advantage in our case,\nbut this can come in quite handy when managing hundreds of pages.\nProvided the python extension is installed in the current environment,\nthe python_index.markdown page will be rendered with the\nPythonHtmlFormatter, this is trivially verifiable with\ngrep \"data-extension\" built_doc/html/python_index.html, which should show :\n<div data-extension=\"python-extension\" class=\"page_container\" id=\"page-wrapper\">\nIn that example, the \"well-known-name\" is python-index and the\ncommand-line argument to let the extension know about the sub-index filename\nis python-index too. The path for the sub-index will be treated\nas relative to the main index.\nYou can of course have the python index be the top level index in the\nsitemap.\n"});