fragment_downloaded_cb({"fragment": "Assigning sub trees to language extensions \nOr let extensions generate sub trees and symbol lists \nWhen hotdoc parses markdown sources it attributes them an extension name This name allows using language specific formatters at format time amongst other things that extensions can customize. Of course an extension can choose to not provide a specific formatter in which case the default formatter will be used. \nNote this is currently the case for the C extension which means that you can technically skip the rest of this section if C is your use case as the default formatter will format symbols as C symbols. \nThe current approach for letting hotdoc know that a page and its subpages should be handled by a given extension is to create a separate sub index file use a well known name placeholder in the sitemap instead of the raw filename and finally pass the raw filename to the chosen extension through the extension prefix index configuration option. \nFor example we could rework our previous example as such \nOpen markdown_files python_index.markdown with the editor of your choice put the following contents inside it and save it \nUpdate sitemap.txt to \nFinally run hotdoc this way \nNote that the two pages you created earlier are not reparsed nor reformatted. This only presents a very theoretical advantage in our case but this can come in quite handy when managing hundreds of pages. \nProvided the python extension is installed in the current environment the python_index.markdown page will be rendered with the PythonHtmlFormatter this is trivially verifiable with grep data extension built_doc html python_index.html which should show div data extension python extension class page_container id page wrapper \nIn that example the well known name is python index and the command line argument to let the extension know about the sub index filename is python index too. The path for the sub index will be treated as relative to the main index. \nYou can of course have the python index be the top level index in the sitemap. \nThis approach of explicitly listing each symbol presents the advantage of letting users precisely define the page in which symbols will be documented as well as their relative ordering however if they do not need this level of control all extensions can generate the symbol s lists and sub index themselves. \nTo have the extension generate these files all you need to do is \nand edit the sitemap back to \nThen run hotdoc without specifying a python index \nRemoving the hotdoc private folder ensures we rebuild from scratch just to prove our point. \nAlso note the python smart index argument. \nThe result for that simple project should be strictly the same you can find generated intermediary markdown pages in hotdoc private generated \nIf you cloned https github.com hotdoc simplest_example you can checkout the generated_symbol_list branch to see this approach instead. \n", "url": "the-markdown-pages.html#page-description"});