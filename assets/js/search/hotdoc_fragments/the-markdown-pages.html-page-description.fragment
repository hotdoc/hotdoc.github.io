fragment_downloaded_cb({"url": "the-markdown-pages.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"the-markdown-pages.markdown\">\n<h1 id=\"the-markdown-pages\">The markdown pages</h1>\n<p>The standalone markdown files (usually located in <code>markdown_files</code>) serve\ntwo main purposes:</p>\n<ul>\n<li>\n<p>Actually holding documentation: the contents in all markdown files will\nget rendered following the <a href=\"http://commonmark.org/\">CommonMark</a> specification nearly as is,\nwith the exception of the <a href=\"syntax-extensions.html\">syntax extensions</a>.</p>\n</li>\n<li>\n<p>Holding metadata in <a href=\"http://yaml.org/\">yaml</a> headers.</p>\n</li>\n</ul>\n<h2 id=\"page-creation-tutorial\">Page creation tutorial</h2>\n<blockquote>\n<p>The final output of this tutorial can be visited\n<a href=\"https://people.collabora.com/%7Emeh/simplest_example/index.html\">here</a>,\nand the final project is hosted <a href=\"https://github.com/hotdoc/simplest_example\">there</a>,\nit contains a Makefile defining the <code>all</code> and <code>clean</code> targets.</p>\n</blockquote>\n<p>The following instructions will help explaining a few concepts through example.</p>\n<h3 id=\"set-up-a-basic-page-tree\">Set up a basic page tree</h3>\n<p>Set up a test folder</p>\n<pre><code class=\"language-shell\">mkdir -p ~/hotdoc_layout_test/markdown_files\ncd ~/hotdoc_layout_test\n</code></pre>\n<blockquote>\n<p>Note: the directory for the markdown files doesn't need to be named <code>markdown_files</code>, and we don't actually need these files to be located in a separate subdirectory, but the former will hopefully become a convention and the latter is a recommended practice.</p>\n</blockquote>\n<p>Now open <code>markdown_files/subpage.markdown</code> with the editor of your choice, put the following contents inside it and save it:</p>\n<pre><code class=\"language-markdown\">---\nshort-description: Just a subpage\n...\n\n# My subpage\n\nUsing *some* **random** `CommonMark` [syntax](http://spec.commonmark.org/)\n\nYou may want to go back to [the index](index.markdown) now?\n</code></pre>\n<p>Then open <code>markdown_files/index.markdown</code> with the editor of your choice, put the following contents inside it and save it:</p>\n<pre><code class=\"language-markdown\"># My project\n</code></pre>\n<p>Finally open <code>sitemap.txt</code>, input the following contents and save it:</p>\n<pre><code class=\"language-txt\">index.markdown\n\tsubpage.markdown\n</code></pre>\n<p>You can now run hotdoc with</p>\n<pre><code class=\"language-shell\">hotdoc --index markdown_files/index.markdown --output built_doc --sitemap sitemap.txt run\n</code></pre>\n<p>from the <code>~/hotdoc_layout_test</code> folder, and check the output with <code>xdg-open built_doc/html/index.html</code>.</p>\n<p>See the <a href=\"the-configuration-file.html\">configuration file section</a> if you'd like to convert this command-line to a configuration file.</p>\n<p>A few things are to be noted here:</p>\n<ul>\n<li>\n<p>Hotdoc will by default look for subpages in the folder where the provided\nindex is located, so only the basenames need to be input in the sitemap.\nAdditional folders in which to look for documentation pages (but also code\nsamples) can be provided to hotdoc with the <code>include-paths</code>\nconfiguration option.</p>\n</li>\n<li>\n<p>Links to pages in the doc tree are updated at format-time, in our example\n<code>index.markdown</code> will be updated to <code>index.html</code> when outputting html.</p>\n</li>\n<li>\n<p>The metadata in the yaml headers is not directly visible in the pages\nthey document, but it is used when presenting subpages. In our case,\nwe did not provide any <code>title</code> metadata, so the title picked for\nour subpage is the first heading found in the page. Try defining\nthe <code>title</code> metadata in the yaml header if that's your thing :)</p>\n</li>\n</ul>\n<p>If all you want hotdoc to do is help you in generating a multi-page website\nfrom a set of markdown files, then you can stop reading this page, throw an\neye at <a href=\"the-configuration-file.html\">this page</a> and\n<a href=\"syntax-extensions.html\">this one too</a> though, can't hurt.</p>\n<p>If however you also want to use one or more hotdoc extensions to parse source\ncode files and document the symbols that they contain, then keep on reading.</p>\n<h3 id=\"assign-subtrees-to-language-extensions\">Assign sub-trees to language extensions</h3>\n<p>When hotdoc parses markdown sources, it attributes them an \"extension-name\". This name allows using language-specific formatters at format-time, amongst other things that extensions can customize. Of course an extension can choose to not provide a specific formatter, in which case the default formatter will be used.</p>\n<blockquote>\n<p>Note: this is (currently) the case for the C extension, which means\nthat you can technically skip the rest of this section if C is your use\ncase, as the default formatter will format symbols as C symbols.</p>\n</blockquote>\n<p>The current approach for letting hotdoc know that a page and its subpages\nshould be handled by a given extension is to create a separate \"sub-index\"\nfile, use a \"well-known-name\" placeholder in the sitemap instead of the raw\nfilename, and finally pass the raw filename to the chosen extension\nthrough the <code>*extension-prefix*-index</code> configuration option.</p>\n<p>For example we could rework our previous example as such:</p>\n<p>Open <code>markdown_files/python_index.markdown</code> with the editor of your choice, put the following contents inside it and save it:</p>\n<pre><code class=\"language-markdown\">---\nshort-description: Just an API\n...\n\n# Python API reference\n\nThis page, and all its (potential) subpages, will be formatted with the\nPythonHtmlFormatter, which is a subclass of the default HtmlFormatter.\n</code></pre>\n<p>Update <code>sitemap.txt</code> to:</p>\n<pre><code class=\"language-txt\">index.markdown\n\tsubpage.markdown\n\tpython-index\n</code></pre>\n<p>Finally run hotdoc this way:</p>\n<pre><code class=\"language-shell\">hotdoc --index markdown_files/index.markdown --output built_doc --python-index python_index.markdown --sitemap sitemap.txt run -vv\n</code></pre>\n<blockquote>\n<p>Note that the two pages you created earlier are not reparsed, nor\nreformatted. This only presents a very theoretical advantage in our case,\nbut this can come in quite handy when managing hundreds of pages.</p>\n</blockquote>\n<p>Provided the <a href=\"https://github.com/hotdoc/hotdoc_python_extension\">python extension</a> is installed in the current environment,\nthe <code>python_index.markdown</code> page will be rendered with the\n<code>PythonHtmlFormatter</code>, this is trivially verifiable with\n<code>grep \"data-extension\" built_doc/html/python_index.html</code>, which should show :\n<code>&lt;div data-extension=\"python-extension\" class=\"page_container\" id=\"page-wrapper\"&gt;</code></p>\n<blockquote>\n<p>Note: In that example, the \"well-known-name\" is <code>python-index</code> and the\ncommand-line argument to let the extension know about the sub-index filename\nis <code>python-index</code> too. The path for the sub-index will be treated\nas relative to the main index.</p>\n</blockquote>\n<h3 id=\"add-symbols-to-pages\">Add symbols to pages</h3>\n<p>The next step will show how to include formatted source code symbols'\ndocumentation in the output.</p>\n<p>The current approach to letting users define where to place the documentation\nfor a given set of symbols is to have them explicitly listed in\nthe page's metadata. The following steps will detail the process.</p>\n<p>First open <code>module_to_document.py</code> with the editor of your choice, put the following contents inside it and save it:</p>\n<pre><code class=\"language-python\">def function_to_document(foo, bar):\n    \"\"\"A function to document\n\n    This is just a simple addition function.\n\n    Args:\n        foo: int, The first operand of the addition\n        bar: int, The other operand of the addition\n    Returns:\n        int: The addition of `foo` and `bar`\n    \"\"\"\n    return foo + bar\n</code></pre>\n<p>Then, edit <code>sitemap.txt</code> to:</p>\n<pre><code class=\"language-txt\">index.markdown\n\tsubpage.markdown\n\tpython-index\n\t\texplicit_list_of_symbols_in_python_module.markdown\n</code></pre>\n<blockquote>\n<p>This syntax doesn't expose any new concept, we're just defining a subpage\nin the standard way.</p>\n</blockquote>\n<p>Finally, open <code>markdown_files/explicit_list_of_symbols_in_python_module.markdown</code>\nwith the editor of your choice, put the following contents inside it and save it:</p>\n<pre><code class=\"language-markdown\">---\nshort-description: Just a python module\nsymbols:\n    - module_to_document.function_to_document\n...\n\n# My module\n\nThis is a module to demonstrate documenting source code symbols.\n</code></pre>\n<p>You can now invoke hotdoc with</p>\n<pre><code class=\"language-shell\">hotdoc --index markdown_files/index.markdown --output built_doc --python-index python_index.markdown --python-sources module_to_document.py --sitemap sitemap.txt run\n</code></pre>\n<p>, and check the result with <code>xdg-open built_doc/html/python_index.html</code>.</p>\n<h3 id=\"or-let-extensions-generate-subtrees-and-symbol-lists\">Or let extensions generate sub-trees and symbol lists</h3>\n<p>This approach of explicitly listing each symbol presents the advantage of\nletting users precisely define the page in which symbols will be documented,\nas well as their relative ordering, however if they do not need this level\nof control, all extensions can generate the symbol's lists and sub-index\nthemselves.</p>\n<p>To have the extension generate these files, all you need to do is:</p>\n<pre><code class=\"language-shell\">rm markdown_files/python_index.markdown\nrm markdown_files/markdown_files/explicit_list_of_symbols_in_python_module.markdown\n</code></pre>\n<p>and edit the sitemap back to:</p>\n<pre><code class=\"language-txt\">index.markdown\n\tsubpage.markdown\n\tpython-index\n</code></pre>\n<p>Then run hotdoc without specifying a <code>python-index</code>:</p>\n<pre><code class=\"language-shell\">rm -rf hotdoc-private* &amp;&amp; hotdoc --index markdown_files/index.markdown --output built_doc --python-sources module_to_document.py --python-smart-index --sitemap sitemap.txt run\n</code></pre>\n<blockquote>\n<p>Removing the <code>hotdoc-private</code> folder ensures we rebuild from scratch,\njust to prove our point.</p>\n</blockquote>\n<blockquote>\n<p>Also note the --python-smart-index argument.</p>\n</blockquote>\n<p>The result for that simple project should be strictly the same, you can find generated \"intermediary\" markdown pages in <code>hotdoc-private/generated</code></p>\n<blockquote>\n<p>If you cloned <a href=\"https://github.com/hotdoc/simplest_example\">https://github.com/hotdoc/simplest_example</a> , you can checkout the \"generated_symbol_list\" branch to see this approach instead.</p>\n</blockquote>\n<h3 id=\"advanced-layout\">Advanced layout</h3>\n<p>The two approaches listed above can be mixed, this will soon<sup>(tm)</sup> be documented.</p>\n\n</div>\n\n\n        "});