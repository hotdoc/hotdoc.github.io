fragment_downloaded_cb({"url":"the-markdown-pages.html#page-description","fragment":"The standalone markdown files (usually located in markdown_files) serve\ntwo main purposes:\nActually holding documentation: the contents in all markdown files will\nget rendered following the CommonMark specification nearly as is,\nwith the exception of the syntax extensions.\nHolding metadata in yaml headers.\nThe final output of this tutorial can be visited\nhere,\nand the final project is hosted there,\nit contains a Makefile defining the all and clean targets.\nThe following instructions will help explaining a few concepts through example.\nSet up a test folder\nNote: the directory for the markdown files doesn't need to be named markdown_files, and we don't actually need these files to be located in a separate subdirectory, but the former will hopefully become a convention and the latter is a recommended practice.\nNow open markdown_files/subpage.markdown with the editor of your choice, put the following contents inside it and save it:\nThen open markdown_files/index.markdown with the editor of your choice, put the following contents inside it and save it:\nFinally open sitemap.txt, input the following contents and save it:\nYou can now run hotdoc with\nfrom the ~/hotdoc_layout_test folder, and check the output with xdg-open built_doc/html/index.html.\nSee the configuration file section if you'd like to convert this command-line to a configuration file.\nA few things are to be noted here:\nHotdoc will by default look for subpages in the folder where the provided\nindex is located, so only the basenames need to be input in the sitemap.\nAdditional folders in which to look for documentation pages (but also code\nsamples) can be provided to hotdoc via the include-paths\nconfiguration option.\nLinks to pages in the doc tree are updated at format-time, in our example\nindex.markdown will be updated to index.html when outputting html.\nThe metadata in the yaml headers is not directly visible in the pages\nthey document, but it is used when presenting subpages. In our case,\nwe did not provide any title metadata, so the title picked for\nour subpage is the first heading found in the page. Try defining\nthe title metadata in the yaml header if that's your thing :)\nIf all you want hotdoc to do is help you in generating a multi-page website\nfrom a set of markdown files, then you can stop reading this page, throw an\neye at this page and\nthis one too though, can't hurt.\nIf however you also want to use one or more hotdoc extensions to parse source\ncode files and document the symbols that they contain, then keep on reading.\nWhen hotdoc parses markdown sources, it attributes them an \"extension-name\". This name allows using language-specific formatters at format-time, amongst other things that extensions can customize. Of course an extension can choose to not provide a specific formatter, in which case the default formatter will be used.\nNote: this is (currently) the case for the C extension, which means\nthat you can technically skip the rest of this section if C is your use\ncase, as the default formatter will format symbols as C symbols.\nThe current approach for letting hotdoc know that a page and its subpages\nshould be handled by a given extension is to create a separate \"sub-index\"\nfile, use a \"well-known-name\" placeholder in the sitemap instead of the raw\nfilename, and finally pass the raw filename to the chosen extension\nthrough the *extension-prefix*-index configuration option.\nFor example we could rework our previous example as such:\nOpen markdown_files/python_index.markdown with the editor of your choice, put the following contents inside it and save it:\nUpdate sitemap.txt to:\nFinally run hotdoc this way:\nNote that the two pages you created earlier are not reparsed, nor\nreformatted. This only presents a very theoretical advantage in our case,\nbut this can come in quite handy when managing hundreds of pages.\nProvided the python extension is installed in the current environment,\nthe python_index.markdown page will be rendered with the\nPythonHtmlFormatter, this is trivially verifiable with\ngrep \"data-extension\" built_doc/html/python_index.html, which should show :\n<div data-extension=\"python-extension\" class=\"page_container\" id=\"page-wrapper\">\nIn that example, the \"well-known-name\" is python-index and the\ncommand-line argument to let the extension know about the sub-index filename\nis python-index too. The path for the sub-index will be treated\nas relative to the main index.\nYou can of course have the python index be the top level index in the\nsitemap.\nThe next step will show how to include formatted source code symbols'\ndocumentation in the output.\nThe current approach to letting users define where to place the documentation\nfor a given set of symbols is to have them explicitly listed in\nthe page's metadata. The following steps will detail the process.\nFirst open module_to_document.py with the editor of your choice, put the following contents inside it and save it:\nThen, edit sitemap.txt to:\nThis syntax doesn't expose any new concept, we're just defining a subpage\nin the standard way.\nFinally, open markdown_files/explicit_list_of_symbols_in_python_module.markdown\nwith the editor of your choice, put the following contents inside it and save it:\nYou can now invoke hotdoc with\n, and check the result with xdg-open built_doc/html/python_index.html.\nThis approach of explicitly listing each symbol presents the advantage of\nletting users precisely define the page in which symbols will be documented,\nas well as their relative ordering, however if they do not need this level\nof control, all extensions can generate the symbol's lists and sub-index\nthemselves.\nTo have the extension generate these files, all you need to do is:\nand edit the sitemap back to:\nThen run hotdoc without specifying a python-index:\nRemoving the hotdoc-private folder ensures we rebuild from scratch,\njust to prove our point.\nAlso note the --python-smart-index argument.\nThe result for that simple project should be strictly the same, you can find generated \"intermediary\" markdown pages in hotdoc-private/generated\nIf you cloned https://github.com/hotdoc/simplest_example , you can checkout the \"generated_symbol_list\" branch to see this approach instead.\nThe two approaches listed above can be mixed, this will soon(tm) be documented.\n"});