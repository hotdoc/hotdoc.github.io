fragment_downloaded_cb({"url": "the-configuration-file.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"the-configuration-file.markdown\">\n<h1 id=\"the-configuration-file\">The configuration file</h1>\n<h2 id=\"format\">Format</h2>\n<p>The configuration file is a simple, flat json file made of a set of key-value pairs, for example:</p>\n<pre><code class=\"language-json\">{\n\t\"index\": \"markdown_files/index.markdown\",\n\t\"sitemap\": \"sitemap.txt\"\n}\n</code></pre>\n<p>is a valid hotdoc's configuration file. The valid keys are computed from the\ncommand-line arguments, which you can list with <code>hotdoc help</code>.</p>\n<p>The convention is to name this file <code>hotdoc.json</code>, when hotdoc is called it\nwill look for a file named that way in its invocation folder, use the\n<code>--conf-file</code> command-line argument to specify an alternate path.</p>\n<p>Options specified from the command-line will take precedence over their json counterpart.</p>\n<h2 id=\"creating-from-a-command-line-invocation\">Creating from a command line invocation</h2>\n<p>An easy way to create a configuration file from a command-line invocation is to replace <code>run</code> with <code>conf</code> in the command-line, for example to translate:</p>\n<pre><code class=\"language-shell\">hotdoc --index markdown_files/index.markdown --output built_doc --sitemap sitemap.txt run\n</code></pre>\n<p>you should use</p>\n<pre><code class=\"language-shell\">hotdoc --index markdown_files/index.markdown --output built_doc --sitemap sitemap.txt conf\n</code></pre>\n<p>This will create a hotdoc.json file in the current directory, which means you can now run hotdoc that way:</p>\n<pre><code class=\"language-shell\">hotdoc run\n</code></pre>\n\n</div>\n\n\n        "});